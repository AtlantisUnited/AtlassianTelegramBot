<%
const getPriorityEmoji = (id) => {
    const priorities = {
        1: '🔴',
        2: '🟠',
        3: '🟡',
        4: '🔵'
    }

    if (priorities[id]) {
      return priorities[id]
    }

    return '⚪️'
}

const getTypeEmoji = (type) => {
  if (type === 'Epic') return '⚡️'
  if (type === 'Story') return '🚩'
  if (type === 'Task') return '✅'
  if (type === 'Sub-task') return '🖇'

  return '❇️'
}

const extractDomain = (dom) => {
  const protocol = `${dom.split('//')[0]}//`
  const withoutProtocol = dom.split('//')[1]

  return `${protocol}${withoutProtocol.split('/')[0]}`
}

var component = (
        issue.fields.components && issue.fields.components.length && _.map(issue.fields.components, function (item) {
            return item.name;
        }) || ['None']
);
var links = changelog.items.filter(cl => cl.field === 'Link')
var domain = extractDomain(issue.self)
%>
<b>🐛 New issue </b><%= issue.fields.parent ? `<a href="${domain}/browse/${issue.fields.parent.key}">${issue.fields.parent.key}</a> → ` : '' %><a href="<%= domain %>/browse/<%= issue.key %> %>"><%=issue.key %></a>
<b>Assignee </b> <a href="<%= issue.fields.assignee && issue.fields.assignee.self  %>"><%= issue.fields.assignee && issue.fields.assignee.displayName || 'None' %></a>

<b><%= issue.fields.summary %></b>

<%= issue.fields.description || 'None' %>

<b><%= getTypeEmoji(issue.fields.issuetype.name) %>Type </b><%= issue.fields.issuetype && issue.fields.issuetype.name || '' %>
<b><%= getPriorityEmoji(issue.fields.priority.id) %>️Priority </b><%= issue.fields.priority && issue.fields.priority.name || 'None' %>
<b>🔗 Links </b><%= links.map(link => `${link.toString} (<a href="${domain}/browse/${link.to}">${link.to}</a>)`).join('\n') || 'None' %>
